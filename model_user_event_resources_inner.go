/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the UserEventResourcesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserEventResourcesInner{}

// UserEventResourcesInner struct for UserEventResourcesInner
type UserEventResourcesInner struct {
	// Type of resource affected. Can be “testName”, “reportTitle”, “userDisplayName”, “alertRuleName”, etc.
	Type *string `json:"type,omitempty"`
	// Name of the affected resource.
	Name *string `json:"name,omitempty"`
}

// NewUserEventResourcesInner instantiates a new UserEventResourcesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEventResourcesInner() *UserEventResourcesInner {
	this := UserEventResourcesInner{}
	return &this
}

// NewUserEventResourcesInnerWithDefaults instantiates a new UserEventResourcesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEventResourcesInnerWithDefaults() *UserEventResourcesInner {
	this := UserEventResourcesInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserEventResourcesInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEventResourcesInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserEventResourcesInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserEventResourcesInner) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserEventResourcesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEventResourcesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserEventResourcesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserEventResourcesInner) SetName(v string) {
	o.Name = &v
}

func (o UserEventResourcesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserEventResourcesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableUserEventResourcesInner struct {
	value *UserEventResourcesInner
	isSet bool
}

func (v NullableUserEventResourcesInner) Get() *UserEventResourcesInner {
	return v.value
}

func (v *NullableUserEventResourcesInner) Set(val *UserEventResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEventResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEventResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEventResourcesInner(val *UserEventResourcesInner) *NullableUserEventResourcesInner {
	return &NullableUserEventResourcesInner{value: val, isSet: true}
}

func (v NullableUserEventResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEventResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


