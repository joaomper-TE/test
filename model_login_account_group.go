/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the LoginAccountGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginAccountGroup{}

// LoginAccountGroup struct for LoginAccountGroup
type LoginAccountGroup struct {
	LoginAccountGroup *AccountGroupUser `json:"loginAccountGroup,omitempty"`
}

// NewLoginAccountGroup instantiates a new LoginAccountGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginAccountGroup() *LoginAccountGroup {
	this := LoginAccountGroup{}
	return &this
}

// NewLoginAccountGroupWithDefaults instantiates a new LoginAccountGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginAccountGroupWithDefaults() *LoginAccountGroup {
	this := LoginAccountGroup{}
	return &this
}

// GetLoginAccountGroup returns the LoginAccountGroup field value if set, zero value otherwise.
func (o *LoginAccountGroup) GetLoginAccountGroup() AccountGroupUser {
	if o == nil || IsNil(o.LoginAccountGroup) {
		var ret AccountGroupUser
		return ret
	}
	return *o.LoginAccountGroup
}

// GetLoginAccountGroupOk returns a tuple with the LoginAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginAccountGroup) GetLoginAccountGroupOk() (*AccountGroupUser, bool) {
	if o == nil || IsNil(o.LoginAccountGroup) {
		return nil, false
	}
	return o.LoginAccountGroup, true
}

// HasLoginAccountGroup returns a boolean if a field has been set.
func (o *LoginAccountGroup) HasLoginAccountGroup() bool {
	if o != nil && !IsNil(o.LoginAccountGroup) {
		return true
	}

	return false
}

// SetLoginAccountGroup gets a reference to the given AccountGroupUser and assigns it to the LoginAccountGroup field.
func (o *LoginAccountGroup) SetLoginAccountGroup(v AccountGroupUser) {
	o.LoginAccountGroup = &v
}

func (o LoginAccountGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginAccountGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoginAccountGroup) {
		toSerialize["loginAccountGroup"] = o.LoginAccountGroup
	}
	return toSerialize, nil
}

type NullableLoginAccountGroup struct {
	value *LoginAccountGroup
	isSet bool
}

func (v NullableLoginAccountGroup) Get() *LoginAccountGroup {
	return v.value
}

func (v *NullableLoginAccountGroup) Set(val *LoginAccountGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginAccountGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginAccountGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginAccountGroup(val *LoginAccountGroup) *NullableLoginAccountGroup {
	return &NullableLoginAccountGroup{value: val, isSet: true}
}

func (v NullableLoginAccountGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginAccountGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


