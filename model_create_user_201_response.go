/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
	"time"
)

// checks if the CreateUser201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUser201Response{}

// CreateUser201Response struct for CreateUser201Response
type CreateUser201Response struct {
	// User's display name.
	Name *string `json:"name,omitempty"`
	// User's email address.
	Email *string `json:"email,omitempty"`
	// Unique ID of the user.
	Uid *string `json:"uid,omitempty"`
	// The date the user registered their account (UTC).
	DateRegistered *time.Time `json:"dateRegistered,omitempty"`
	LoginAccountGroup *AccountGroupUser `json:"loginAccountGroup,omitempty"`
	AccountGroupRoles []AccountGroupRolesAccountGroupRolesInner `json:"accountGroupRoles,omitempty"`
	AllAccountGroupRoles []Role `json:"allAccountGroupRoles,omitempty"`
	Links *SelfLinksLinks `json:"_links,omitempty"`
}

// NewCreateUser201Response instantiates a new CreateUser201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUser201Response() *CreateUser201Response {
	this := CreateUser201Response{}
	return &this
}

// NewCreateUser201ResponseWithDefaults instantiates a new CreateUser201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUser201ResponseWithDefaults() *CreateUser201Response {
	this := CreateUser201Response{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateUser201Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateUser201Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateUser201Response) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateUser201Response) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateUser201Response) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateUser201Response) SetEmail(v string) {
	o.Email = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *CreateUser201Response) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *CreateUser201Response) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *CreateUser201Response) SetUid(v string) {
	o.Uid = &v
}

// GetDateRegistered returns the DateRegistered field value if set, zero value otherwise.
func (o *CreateUser201Response) GetDateRegistered() time.Time {
	if o == nil || IsNil(o.DateRegistered) {
		var ret time.Time
		return ret
	}
	return *o.DateRegistered
}

// GetDateRegisteredOk returns a tuple with the DateRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetDateRegisteredOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateRegistered) {
		return nil, false
	}
	return o.DateRegistered, true
}

// HasDateRegistered returns a boolean if a field has been set.
func (o *CreateUser201Response) HasDateRegistered() bool {
	if o != nil && !IsNil(o.DateRegistered) {
		return true
	}

	return false
}

// SetDateRegistered gets a reference to the given time.Time and assigns it to the DateRegistered field.
func (o *CreateUser201Response) SetDateRegistered(v time.Time) {
	o.DateRegistered = &v
}

// GetLoginAccountGroup returns the LoginAccountGroup field value if set, zero value otherwise.
func (o *CreateUser201Response) GetLoginAccountGroup() AccountGroupUser {
	if o == nil || IsNil(o.LoginAccountGroup) {
		var ret AccountGroupUser
		return ret
	}
	return *o.LoginAccountGroup
}

// GetLoginAccountGroupOk returns a tuple with the LoginAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetLoginAccountGroupOk() (*AccountGroupUser, bool) {
	if o == nil || IsNil(o.LoginAccountGroup) {
		return nil, false
	}
	return o.LoginAccountGroup, true
}

// HasLoginAccountGroup returns a boolean if a field has been set.
func (o *CreateUser201Response) HasLoginAccountGroup() bool {
	if o != nil && !IsNil(o.LoginAccountGroup) {
		return true
	}

	return false
}

// SetLoginAccountGroup gets a reference to the given AccountGroupUser and assigns it to the LoginAccountGroup field.
func (o *CreateUser201Response) SetLoginAccountGroup(v AccountGroupUser) {
	o.LoginAccountGroup = &v
}

// GetAccountGroupRoles returns the AccountGroupRoles field value if set, zero value otherwise.
func (o *CreateUser201Response) GetAccountGroupRoles() []AccountGroupRolesAccountGroupRolesInner {
	if o == nil || IsNil(o.AccountGroupRoles) {
		var ret []AccountGroupRolesAccountGroupRolesInner
		return ret
	}
	return o.AccountGroupRoles
}

// GetAccountGroupRolesOk returns a tuple with the AccountGroupRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetAccountGroupRolesOk() ([]AccountGroupRolesAccountGroupRolesInner, bool) {
	if o == nil || IsNil(o.AccountGroupRoles) {
		return nil, false
	}
	return o.AccountGroupRoles, true
}

// HasAccountGroupRoles returns a boolean if a field has been set.
func (o *CreateUser201Response) HasAccountGroupRoles() bool {
	if o != nil && !IsNil(o.AccountGroupRoles) {
		return true
	}

	return false
}

// SetAccountGroupRoles gets a reference to the given []AccountGroupRolesAccountGroupRolesInner and assigns it to the AccountGroupRoles field.
func (o *CreateUser201Response) SetAccountGroupRoles(v []AccountGroupRolesAccountGroupRolesInner) {
	o.AccountGroupRoles = v
}

// GetAllAccountGroupRoles returns the AllAccountGroupRoles field value if set, zero value otherwise.
func (o *CreateUser201Response) GetAllAccountGroupRoles() []Role {
	if o == nil || IsNil(o.AllAccountGroupRoles) {
		var ret []Role
		return ret
	}
	return o.AllAccountGroupRoles
}

// GetAllAccountGroupRolesOk returns a tuple with the AllAccountGroupRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetAllAccountGroupRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.AllAccountGroupRoles) {
		return nil, false
	}
	return o.AllAccountGroupRoles, true
}

// HasAllAccountGroupRoles returns a boolean if a field has been set.
func (o *CreateUser201Response) HasAllAccountGroupRoles() bool {
	if o != nil && !IsNil(o.AllAccountGroupRoles) {
		return true
	}

	return false
}

// SetAllAccountGroupRoles gets a reference to the given []Role and assigns it to the AllAccountGroupRoles field.
func (o *CreateUser201Response) SetAllAccountGroupRoles(v []Role) {
	o.AllAccountGroupRoles = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CreateUser201Response) GetLinks() SelfLinksLinks {
	if o == nil || IsNil(o.Links) {
		var ret SelfLinksLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser201Response) GetLinksOk() (*SelfLinksLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CreateUser201Response) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinksLinks and assigns it to the Links field.
func (o *CreateUser201Response) SetLinks(v SelfLinksLinks) {
	o.Links = &v
}

func (o CreateUser201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUser201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.DateRegistered) {
		toSerialize["dateRegistered"] = o.DateRegistered
	}
	if !IsNil(o.LoginAccountGroup) {
		toSerialize["loginAccountGroup"] = o.LoginAccountGroup
	}
	if !IsNil(o.AccountGroupRoles) {
		toSerialize["accountGroupRoles"] = o.AccountGroupRoles
	}
	if !IsNil(o.AllAccountGroupRoles) {
		toSerialize["allAccountGroupRoles"] = o.AllAccountGroupRoles
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableCreateUser201Response struct {
	value *CreateUser201Response
	isSet bool
}

func (v NullableCreateUser201Response) Get() *CreateUser201Response {
	return v.value
}

func (v *NullableCreateUser201Response) Set(val *CreateUser201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUser201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUser201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUser201Response(val *CreateUser201Response) *NullableCreateUser201Response {
	return &NullableCreateUser201Response{value: val, isSet: true}
}

func (v NullableCreateUser201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUser201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


