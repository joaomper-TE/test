/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the EnterpriseAgents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnterpriseAgents{}

// EnterpriseAgents struct for EnterpriseAgents
type EnterpriseAgents struct {
	Agents []EnterpriseAgent `json:"agents,omitempty"`
}

// NewEnterpriseAgents instantiates a new EnterpriseAgents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseAgents() *EnterpriseAgents {
	this := EnterpriseAgents{}
	return &this
}

// NewEnterpriseAgentsWithDefaults instantiates a new EnterpriseAgents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseAgentsWithDefaults() *EnterpriseAgents {
	this := EnterpriseAgents{}
	return &this
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *EnterpriseAgents) GetAgents() []EnterpriseAgent {
	if o == nil || IsNil(o.Agents) {
		var ret []EnterpriseAgent
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseAgents) GetAgentsOk() ([]EnterpriseAgent, bool) {
	if o == nil || IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *EnterpriseAgents) HasAgents() bool {
	if o != nil && !IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []EnterpriseAgent and assigns it to the Agents field.
func (o *EnterpriseAgents) SetAgents(v []EnterpriseAgent) {
	o.Agents = v
}

func (o EnterpriseAgents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnterpriseAgents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	return toSerialize, nil
}

type NullableEnterpriseAgents struct {
	value *EnterpriseAgents
	isSet bool
}

func (v NullableEnterpriseAgents) Get() *EnterpriseAgents {
	return v.value
}

func (v *NullableEnterpriseAgents) Set(val *EnterpriseAgents) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseAgents) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseAgents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseAgents(val *EnterpriseAgents) *NullableEnterpriseAgents {
	return &NullableEnterpriseAgents{value: val, isSet: true}
}

func (v NullableEnterpriseAgents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseAgents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


