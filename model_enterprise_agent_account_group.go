/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the EnterpriseAgentAccountGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnterpriseAgentAccountGroup{}

// EnterpriseAgentAccountGroup struct for EnterpriseAgentAccountGroup
type EnterpriseAgentAccountGroup struct {
	// Account group ID
	Aid *string `json:"aid,omitempty"`
	// Account group name
	AccountGroupName *string `json:"accountGroupName,omitempty"`
}

// NewEnterpriseAgentAccountGroup instantiates a new EnterpriseAgentAccountGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseAgentAccountGroup() *EnterpriseAgentAccountGroup {
	this := EnterpriseAgentAccountGroup{}
	return &this
}

// NewEnterpriseAgentAccountGroupWithDefaults instantiates a new EnterpriseAgentAccountGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseAgentAccountGroupWithDefaults() *EnterpriseAgentAccountGroup {
	this := EnterpriseAgentAccountGroup{}
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *EnterpriseAgentAccountGroup) GetAid() string {
	if o == nil || IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseAgentAccountGroup) GetAidOk() (*string, bool) {
	if o == nil || IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *EnterpriseAgentAccountGroup) HasAid() bool {
	if o != nil && !IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *EnterpriseAgentAccountGroup) SetAid(v string) {
	o.Aid = &v
}

// GetAccountGroupName returns the AccountGroupName field value if set, zero value otherwise.
func (o *EnterpriseAgentAccountGroup) GetAccountGroupName() string {
	if o == nil || IsNil(o.AccountGroupName) {
		var ret string
		return ret
	}
	return *o.AccountGroupName
}

// GetAccountGroupNameOk returns a tuple with the AccountGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseAgentAccountGroup) GetAccountGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountGroupName) {
		return nil, false
	}
	return o.AccountGroupName, true
}

// HasAccountGroupName returns a boolean if a field has been set.
func (o *EnterpriseAgentAccountGroup) HasAccountGroupName() bool {
	if o != nil && !IsNil(o.AccountGroupName) {
		return true
	}

	return false
}

// SetAccountGroupName gets a reference to the given string and assigns it to the AccountGroupName field.
func (o *EnterpriseAgentAccountGroup) SetAccountGroupName(v string) {
	o.AccountGroupName = &v
}

func (o EnterpriseAgentAccountGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnterpriseAgentAccountGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !IsNil(o.AccountGroupName) {
		toSerialize["accountGroupName"] = o.AccountGroupName
	}
	return toSerialize, nil
}

type NullableEnterpriseAgentAccountGroup struct {
	value *EnterpriseAgentAccountGroup
	isSet bool
}

func (v NullableEnterpriseAgentAccountGroup) Get() *EnterpriseAgentAccountGroup {
	return v.value
}

func (v *NullableEnterpriseAgentAccountGroup) Set(val *EnterpriseAgentAccountGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseAgentAccountGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseAgentAccountGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseAgentAccountGroup(val *EnterpriseAgentAccountGroup) *NullableEnterpriseAgentAccountGroup {
	return &NullableEnterpriseAgentAccountGroup{value: val, isSet: true}
}

func (v NullableEnterpriseAgentAccountGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseAgentAccountGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


