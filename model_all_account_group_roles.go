/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the AllAccountGroupRoles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllAccountGroupRoles{}

// AllAccountGroupRoles struct for AllAccountGroupRoles
type AllAccountGroupRoles struct {
	AllAccountGroupRoles []Role `json:"allAccountGroupRoles,omitempty"`
}

// NewAllAccountGroupRoles instantiates a new AllAccountGroupRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllAccountGroupRoles() *AllAccountGroupRoles {
	this := AllAccountGroupRoles{}
	return &this
}

// NewAllAccountGroupRolesWithDefaults instantiates a new AllAccountGroupRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllAccountGroupRolesWithDefaults() *AllAccountGroupRoles {
	this := AllAccountGroupRoles{}
	return &this
}

// GetAllAccountGroupRoles returns the AllAccountGroupRoles field value if set, zero value otherwise.
func (o *AllAccountGroupRoles) GetAllAccountGroupRoles() []Role {
	if o == nil || IsNil(o.AllAccountGroupRoles) {
		var ret []Role
		return ret
	}
	return o.AllAccountGroupRoles
}

// GetAllAccountGroupRolesOk returns a tuple with the AllAccountGroupRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllAccountGroupRoles) GetAllAccountGroupRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.AllAccountGroupRoles) {
		return nil, false
	}
	return o.AllAccountGroupRoles, true
}

// HasAllAccountGroupRoles returns a boolean if a field has been set.
func (o *AllAccountGroupRoles) HasAllAccountGroupRoles() bool {
	if o != nil && !IsNil(o.AllAccountGroupRoles) {
		return true
	}

	return false
}

// SetAllAccountGroupRoles gets a reference to the given []Role and assigns it to the AllAccountGroupRoles field.
func (o *AllAccountGroupRoles) SetAllAccountGroupRoles(v []Role) {
	o.AllAccountGroupRoles = v
}

func (o AllAccountGroupRoles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllAccountGroupRoles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllAccountGroupRoles) {
		toSerialize["allAccountGroupRoles"] = o.AllAccountGroupRoles
	}
	return toSerialize, nil
}

type NullableAllAccountGroupRoles struct {
	value *AllAccountGroupRoles
	isSet bool
}

func (v NullableAllAccountGroupRoles) Get() *AllAccountGroupRoles {
	return v.value
}

func (v *NullableAllAccountGroupRoles) Set(val *AllAccountGroupRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableAllAccountGroupRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableAllAccountGroupRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllAccountGroupRoles(val *AllAccountGroupRoles) *NullableAllAccountGroupRoles {
	return &NullableAllAccountGroupRoles{value: val, isSet: true}
}

func (v NullableAllAccountGroupRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllAccountGroupRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


