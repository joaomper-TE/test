/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
	"time"
)

// checks if the UserEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserEvents{}

// UserEvents struct for UserEvents
type UserEvents struct {
	AuditEvents []UserEvent `json:"auditEvents,omitempty"`
	// (Optional) When passing `window`, the client will also receive the `startDate` and `endDate` fields.
	StartDate *time.Time `json:"startDate,omitempty"`
	// (Optional) When passing `window`, the client will also receive the `startDate` and `endDate` fields.
	EndDate *time.Time `json:"endDate,omitempty"`
}

// NewUserEvents instantiates a new UserEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEvents() *UserEvents {
	this := UserEvents{}
	return &this
}

// NewUserEventsWithDefaults instantiates a new UserEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEventsWithDefaults() *UserEvents {
	this := UserEvents{}
	return &this
}

// GetAuditEvents returns the AuditEvents field value if set, zero value otherwise.
func (o *UserEvents) GetAuditEvents() []UserEvent {
	if o == nil || IsNil(o.AuditEvents) {
		var ret []UserEvent
		return ret
	}
	return o.AuditEvents
}

// GetAuditEventsOk returns a tuple with the AuditEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEvents) GetAuditEventsOk() ([]UserEvent, bool) {
	if o == nil || IsNil(o.AuditEvents) {
		return nil, false
	}
	return o.AuditEvents, true
}

// HasAuditEvents returns a boolean if a field has been set.
func (o *UserEvents) HasAuditEvents() bool {
	if o != nil && !IsNil(o.AuditEvents) {
		return true
	}

	return false
}

// SetAuditEvents gets a reference to the given []UserEvent and assigns it to the AuditEvents field.
func (o *UserEvents) SetAuditEvents(v []UserEvent) {
	o.AuditEvents = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *UserEvents) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEvents) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *UserEvents) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *UserEvents) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UserEvents) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEvents) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UserEvents) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *UserEvents) SetEndDate(v time.Time) {
	o.EndDate = &v
}

func (o UserEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditEvents) {
		toSerialize["auditEvents"] = o.AuditEvents
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	return toSerialize, nil
}

type NullableUserEvents struct {
	value *UserEvents
	isSet bool
}

func (v NullableUserEvents) Get() *UserEvents {
	return v.value
}

func (v *NullableUserEvents) Set(val *UserEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEvents(val *UserEvents) *NullableUserEvents {
	return &NullableUserEvents{value: val, isSet: true}
}

func (v NullableUserEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


