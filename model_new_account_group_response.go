/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the NewAccountGroupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewAccountGroupResponse{}

// NewAccountGroupResponse struct for NewAccountGroupResponse
type NewAccountGroupResponse struct {
	// Unique name for the account group within an organization.
	AccountGroupName *string `json:"accountGroupName,omitempty"`
	// Unique ID representing the account group.
	Aid *string `json:"aid,omitempty"`
	// Indicates whether the requested aid is the context of the current account.
	IsCurrentAccountGroup *bool `json:"isCurrentAccountGroup,omitempty"`
	// Indicates whether the aid is the default one for the requesting user.
	IsDefaultAccountGroup *bool `json:"isDefaultAccountGroup,omitempty"`
	// (Optional) Indicates whether the aid is the default one for the requesting user.
	OrganizationName *string `json:"organizationName,omitempty"`
	Users []UserAccountGroup `json:"users,omitempty"`
}

// NewNewAccountGroupResponse instantiates a new NewAccountGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewAccountGroupResponse() *NewAccountGroupResponse {
	this := NewAccountGroupResponse{}
	return &this
}

// NewNewAccountGroupResponseWithDefaults instantiates a new NewAccountGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewAccountGroupResponseWithDefaults() *NewAccountGroupResponse {
	this := NewAccountGroupResponse{}
	return &this
}

// GetAccountGroupName returns the AccountGroupName field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetAccountGroupName() string {
	if o == nil || IsNil(o.AccountGroupName) {
		var ret string
		return ret
	}
	return *o.AccountGroupName
}

// GetAccountGroupNameOk returns a tuple with the AccountGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetAccountGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountGroupName) {
		return nil, false
	}
	return o.AccountGroupName, true
}

// HasAccountGroupName returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasAccountGroupName() bool {
	if o != nil && !IsNil(o.AccountGroupName) {
		return true
	}

	return false
}

// SetAccountGroupName gets a reference to the given string and assigns it to the AccountGroupName field.
func (o *NewAccountGroupResponse) SetAccountGroupName(v string) {
	o.AccountGroupName = &v
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetAid() string {
	if o == nil || IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetAidOk() (*string, bool) {
	if o == nil || IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasAid() bool {
	if o != nil && !IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *NewAccountGroupResponse) SetAid(v string) {
	o.Aid = &v
}

// GetIsCurrentAccountGroup returns the IsCurrentAccountGroup field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetIsCurrentAccountGroup() bool {
	if o == nil || IsNil(o.IsCurrentAccountGroup) {
		var ret bool
		return ret
	}
	return *o.IsCurrentAccountGroup
}

// GetIsCurrentAccountGroupOk returns a tuple with the IsCurrentAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetIsCurrentAccountGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCurrentAccountGroup) {
		return nil, false
	}
	return o.IsCurrentAccountGroup, true
}

// HasIsCurrentAccountGroup returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasIsCurrentAccountGroup() bool {
	if o != nil && !IsNil(o.IsCurrentAccountGroup) {
		return true
	}

	return false
}

// SetIsCurrentAccountGroup gets a reference to the given bool and assigns it to the IsCurrentAccountGroup field.
func (o *NewAccountGroupResponse) SetIsCurrentAccountGroup(v bool) {
	o.IsCurrentAccountGroup = &v
}

// GetIsDefaultAccountGroup returns the IsDefaultAccountGroup field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetIsDefaultAccountGroup() bool {
	if o == nil || IsNil(o.IsDefaultAccountGroup) {
		var ret bool
		return ret
	}
	return *o.IsDefaultAccountGroup
}

// GetIsDefaultAccountGroupOk returns a tuple with the IsDefaultAccountGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetIsDefaultAccountGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefaultAccountGroup) {
		return nil, false
	}
	return o.IsDefaultAccountGroup, true
}

// HasIsDefaultAccountGroup returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasIsDefaultAccountGroup() bool {
	if o != nil && !IsNil(o.IsDefaultAccountGroup) {
		return true
	}

	return false
}

// SetIsDefaultAccountGroup gets a reference to the given bool and assigns it to the IsDefaultAccountGroup field.
func (o *NewAccountGroupResponse) SetIsDefaultAccountGroup(v bool) {
	o.IsDefaultAccountGroup = &v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetOrganizationName() string {
	if o == nil || IsNil(o.OrganizationName) {
		var ret string
		return ret
	}
	return *o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetOrganizationNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationName) {
		return nil, false
	}
	return o.OrganizationName, true
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasOrganizationName() bool {
	if o != nil && !IsNil(o.OrganizationName) {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given string and assigns it to the OrganizationName field.
func (o *NewAccountGroupResponse) SetOrganizationName(v string) {
	o.OrganizationName = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *NewAccountGroupResponse) GetUsers() []UserAccountGroup {
	if o == nil || IsNil(o.Users) {
		var ret []UserAccountGroup
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAccountGroupResponse) GetUsersOk() ([]UserAccountGroup, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *NewAccountGroupResponse) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserAccountGroup and assigns it to the Users field.
func (o *NewAccountGroupResponse) SetUsers(v []UserAccountGroup) {
	o.Users = v
}

func (o NewAccountGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewAccountGroupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountGroupName) {
		toSerialize["accountGroupName"] = o.AccountGroupName
	}
	if !IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !IsNil(o.IsCurrentAccountGroup) {
		toSerialize["isCurrentAccountGroup"] = o.IsCurrentAccountGroup
	}
	if !IsNil(o.IsDefaultAccountGroup) {
		toSerialize["isDefaultAccountGroup"] = o.IsDefaultAccountGroup
	}
	if !IsNil(o.OrganizationName) {
		toSerialize["organizationName"] = o.OrganizationName
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableNewAccountGroupResponse struct {
	value *NewAccountGroupResponse
	isSet bool
}

func (v NullableNewAccountGroupResponse) Get() *NewAccountGroupResponse {
	return v.value
}

func (v *NullableNewAccountGroupResponse) Set(val *NewAccountGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNewAccountGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNewAccountGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewAccountGroupResponse(val *NewAccountGroupResponse) *NullableNewAccountGroupResponse {
	return &NullableNewAccountGroupResponse{value: val, isSet: true}
}

func (v NullableNewAccountGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewAccountGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


