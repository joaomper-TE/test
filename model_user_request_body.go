/*
Administrative API

## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.

API version: 7.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package thousandeyes

import (
	"encoding/json"
)

// checks if the UserRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRequestBody{}

// UserRequestBody struct for UserRequestBody
type UserRequestBody struct {
	// User's display name.
	Name *string `json:"name,omitempty"`
	// User's email address.
	Email *string `json:"email,omitempty"`
	// Unique ID of the login account group.
	LoginAccountGroupId *string `json:"loginAccountGroupId,omitempty"`
	AccountGroupRoles []AccountGroupRolesRequestBodyInner `json:"accountGroupRoles,omitempty"`
	// Unique IDs representing the roles.
	AllAccountGroupRoleIds []string `json:"allAccountGroupRoleIds,omitempty"`
}

// NewUserRequestBody instantiates a new UserRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRequestBody() *UserRequestBody {
	this := UserRequestBody{}
	return &this
}

// NewUserRequestBodyWithDefaults instantiates a new UserRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRequestBodyWithDefaults() *UserRequestBody {
	this := UserRequestBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserRequestBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRequestBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserRequestBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserRequestBody) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserRequestBody) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRequestBody) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserRequestBody) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserRequestBody) SetEmail(v string) {
	o.Email = &v
}

// GetLoginAccountGroupId returns the LoginAccountGroupId field value if set, zero value otherwise.
func (o *UserRequestBody) GetLoginAccountGroupId() string {
	if o == nil || IsNil(o.LoginAccountGroupId) {
		var ret string
		return ret
	}
	return *o.LoginAccountGroupId
}

// GetLoginAccountGroupIdOk returns a tuple with the LoginAccountGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRequestBody) GetLoginAccountGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.LoginAccountGroupId) {
		return nil, false
	}
	return o.LoginAccountGroupId, true
}

// HasLoginAccountGroupId returns a boolean if a field has been set.
func (o *UserRequestBody) HasLoginAccountGroupId() bool {
	if o != nil && !IsNil(o.LoginAccountGroupId) {
		return true
	}

	return false
}

// SetLoginAccountGroupId gets a reference to the given string and assigns it to the LoginAccountGroupId field.
func (o *UserRequestBody) SetLoginAccountGroupId(v string) {
	o.LoginAccountGroupId = &v
}

// GetAccountGroupRoles returns the AccountGroupRoles field value if set, zero value otherwise.
func (o *UserRequestBody) GetAccountGroupRoles() []AccountGroupRolesRequestBodyInner {
	if o == nil || IsNil(o.AccountGroupRoles) {
		var ret []AccountGroupRolesRequestBodyInner
		return ret
	}
	return o.AccountGroupRoles
}

// GetAccountGroupRolesOk returns a tuple with the AccountGroupRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRequestBody) GetAccountGroupRolesOk() ([]AccountGroupRolesRequestBodyInner, bool) {
	if o == nil || IsNil(o.AccountGroupRoles) {
		return nil, false
	}
	return o.AccountGroupRoles, true
}

// HasAccountGroupRoles returns a boolean if a field has been set.
func (o *UserRequestBody) HasAccountGroupRoles() bool {
	if o != nil && !IsNil(o.AccountGroupRoles) {
		return true
	}

	return false
}

// SetAccountGroupRoles gets a reference to the given []AccountGroupRolesRequestBodyInner and assigns it to the AccountGroupRoles field.
func (o *UserRequestBody) SetAccountGroupRoles(v []AccountGroupRolesRequestBodyInner) {
	o.AccountGroupRoles = v
}

// GetAllAccountGroupRoleIds returns the AllAccountGroupRoleIds field value if set, zero value otherwise.
func (o *UserRequestBody) GetAllAccountGroupRoleIds() []string {
	if o == nil || IsNil(o.AllAccountGroupRoleIds) {
		var ret []string
		return ret
	}
	return o.AllAccountGroupRoleIds
}

// GetAllAccountGroupRoleIdsOk returns a tuple with the AllAccountGroupRoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRequestBody) GetAllAccountGroupRoleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllAccountGroupRoleIds) {
		return nil, false
	}
	return o.AllAccountGroupRoleIds, true
}

// HasAllAccountGroupRoleIds returns a boolean if a field has been set.
func (o *UserRequestBody) HasAllAccountGroupRoleIds() bool {
	if o != nil && !IsNil(o.AllAccountGroupRoleIds) {
		return true
	}

	return false
}

// SetAllAccountGroupRoleIds gets a reference to the given []string and assigns it to the AllAccountGroupRoleIds field.
func (o *UserRequestBody) SetAllAccountGroupRoleIds(v []string) {
	o.AllAccountGroupRoleIds = v
}

func (o UserRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.LoginAccountGroupId) {
		toSerialize["loginAccountGroupId"] = o.LoginAccountGroupId
	}
	if !IsNil(o.AccountGroupRoles) {
		toSerialize["accountGroupRoles"] = o.AccountGroupRoles
	}
	if !IsNil(o.AllAccountGroupRoleIds) {
		toSerialize["allAccountGroupRoleIds"] = o.AllAccountGroupRoleIds
	}
	return toSerialize, nil
}

type NullableUserRequestBody struct {
	value *UserRequestBody
	isSet bool
}

func (v NullableUserRequestBody) Get() *UserRequestBody {
	return v.value
}

func (v *NullableUserRequestBody) Set(val *UserRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRequestBody(val *UserRequestBody) *NullableUserRequestBody {
	return &NullableUserRequestBody{value: val, isSet: true}
}

func (v NullableUserRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


